
import os
import argparse
from pathlib import Path
from textwrap import dedent

# --- configuration ---
METRICS = {
    "aG":       r"$a(G)$",
    "e0_mult":  r"$m_0$",
    "e1_mult":  r"$m_1$",
    "CIS":      r"CIS",
}

# Preferred display order; any missing ones are skipped automatically.
PREFERRED_GRAPH_ORDER = [
    "isis-links",  # JSON_Files/isis-links
    "bfn", "cpt", "dur", "els", "jnb", "pta", "pzb", "vdp"
]

def find_graph_dirs(root: Path):
    """Return mapping: graph_name -> directory containing its images."""
    base_json = root / "JSON_Files"
    base_tgf  = root / "TGF_Files"

    found = {}

    # JSON graphs (expect a subdir per JSON graph; currently 'isis-links')
    if base_json.exists():
        for d in sorted(p for p in base_json.iterdir() if p.is_dir()):
            found[d.name] = d

    # TGF graphs (one subdir per graph)
    if base_tgf.exists():
        for d in sorted(p for p in base_tgf.iterdir() if p.is_dir()):
            found[d.name] = d

    # Reorder by preferred order, then append any extras we discovered
    ordered = {}
    for name in PREFERRED_GRAPH_ORDER:
        if name in found:
            ordered[name] = found[name]
    for name, p in found.items():
        if name not in ordered:
            ordered[name] = p
    return ordered

def latex_header():
    return dedent(r"""
    % === Auto-generated by make_latex_no_removal.py ===
    % Requires in preamble: \usepackage{graphicx,subcaption}
    % Tip: compile with latexmk -pdf
    """)

def begin_figure_star():
    return r"\begin{figure*}[htbp]\centering"  # wide figure across both columns

def end_figure_star(caption, label):
    return r"\caption{{{caption}}}\label{{{label}}}\end{figure*}"

def subfigure_block(img_path: Path, title: str, label: str, cols: int, idx: int):
    """
    Create a subfigure with width based on number of columns (2,3,4 supported).
    Adds a line break after each row.
    """
    colwidth = {2: "0.48", 3: "0.32", 4: "0.24"}.get(cols, "0.32")
    lines = []
    lines.append(r"\begin{subfigure}[htbp]{0.32\textwidth}")
    # Use POSIX path separators in LaTeX
    gfx = img_path.as_posix()
    lines.append(rf"\includegraphics[width=\linewidth]{{{gfx}}}")
    lines.append(rf"\caption{{{title}}}")
    lines.append(rf"\label{{{label}}}")
    lines.append(r"\end{subfigure}")
    # Row break after every 'cols' subfigures
    if (idx + 1) % cols == 0:
        lines.append(r"\vspace{0.5em}\\")
    else:
        lines.append(r"\hfill")
    return "\n".join(lines)

def build_metric_figure(root: Path, metric_key: str, graph_dirs: dict, cols: int = 3):
    """Assemble one LaTeX figure for a single metric across all graphs."""
    pretty = METRICS[metric_key]
    figure_lines = [begin_figure_star()]

    idx = 0
    for gname, gdir in graph_dirs.items():
        fname = f"{gname}_AUC_{metric_key}_no_removal.jpg"
        img   = gdir / fname
        if not img.exists():
            # Skip gracefully if missing
            continue
        title = f"{gname}: AUC {pretty} (no removals)"
        label = f"fig:{metric_key}_{gname}_no_removal"
        figure_lines.append(subfigure_block(img, title, label, cols, idx))
        idx += 1

    cap = f"AUC {pretty} across graphs (no removals)"
    label = f"fig:auc_{metric_key}_no_removal"
    figure_lines.append(end_figure_star(cap, label))
    figure_lines.append("")  # blank line
    return "\n".join(figure_lines)

def main():
    ap = argparse.ArgumentParser(description="Emit LaTeX figures for No-Removal AUC plots.")
    ap.add_argument("--root", default="Reinforcements_NoRemoval",
                    help="Root directory containing JSON_Files/ and TGF_Files/ (default: %(default)s)")
    ap.add_argument("--out", default="auc_no_removal_figures.tex",
                    help="Output LaTeX file (default: %(default)s)")
    ap.add_argument("--cols", type=int, default=3, choices=[2,3,4],
                    help="Number of subfigures per row (default: %(default)s)")
    args = ap.parse_args()

    root = Path(args.root)
    graph_dirs = find_graph_dirs(root)
    if not graph_dirs:
        raise SystemExit(f"No graphs found under {root}")

    blocks = [latex_header()]
    for metric_key in METRICS.keys():
        blocks.append(build_metric_figure(root, metric_key, graph_dirs, cols=args.cols))

    out_path = Path(args.out)
    out_path.write_text("\n".join(blocks), encoding="utf-8")
    print(f"Wrote {out_path.resolve()}")

if __name__ == "__main__":
    main()
