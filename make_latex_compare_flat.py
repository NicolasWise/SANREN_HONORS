import argparse
from pathlib import Path
from textwrap import dedent

# ---- Config ---------------------------------------------------------------
'''GRAPHS = [
    "isis-links.json",
    "bfn.tgf", "cpt.tgf", "dur.tgf", "els.tgf",
    "jnb.tgf", "pta.tgf", "pzb.tgf", "vdp.tgf",
]'''
GRAPHS = ['isis-links.json']



# Metric tokens exactly as they appear in filenames:
#   <graph>_compare_<metric>.jpg   (e.g., bfn.tgf_compare_aG.jpg)
METRICS = {
    "aG":  r"$a(G)$",
    "CIS": r"CIS",
    "e0_mult":  r"$e0$",
    "e1_mult":  r"$e1$",
}

EXTS = {".jpg", ".jpeg", ".png", ".pdf"}  # accepted image types (case-insensitive)

# ---- Helpers --------------------------------------------------------------
def nice_graph_name(stem: str) -> str:
    """Drop extension for captions."""
    for suf in (".tgf", ".json"):
        if stem.endswith(suf):
            return stem[: -len(suf)]
    return stem

def latex_header():
    return dedent(r"""
    % === Auto-generated by make_latex_compare_flat.py ===
    % Requires in preamble: \usepackage{graphicx,subcaption}
    % Tip: compile with: latexmk -pdf
    """)

def begin_figure_star():
    return r"\begin{figure*}[htbp]\centering"

def end_figure_star(caption: str, label: str):
    return r"\caption{{{caption}}}\label{{{label}}}\end{figure*}"

def subfigure_block(img_path: Path, title: str, label: str, cols: int, idx: int):
    colwidth = {2: "0.48", 3: "0.32", 4: "0.24"}.get(cols, "0.32")
    lines = [
        r"\begin{subfigure}[htbp]{0.8\textwidth}",
        rf"\includegraphics[width=\linewidth]{{{img_path}}}",
        rf"\caption{{{title}}}",
        rf"\label{{{label}}}",
        r"\end{subfigure}",
    ]
    lines.append(r"\vspace{0.6em}\\" if (idx + 1) % cols == 0 else r"\hfill")
    return "\n".join(lines)

def find_image(root: Path, base: str):
    """Return the first existing image path among allowed extensions."""
    for ext in EXTS:
        p = root / f"{base}{ext}"
        if p.exists():
            return p
    return None

def build_metric_figure(root: Path, metric_token: str, pretty: str, cols: int):
    lines = [begin_figure_star()]
    count = 0
    for i, g in enumerate(GRAPHS):
        base = f"{g}_compare_{metric_token}.jpg"
        
        g_disp = nice_graph_name(g)
        nic = 'images/' + base
        # label-safe name
        safe = g_disp.replace('.', '-').replace('_', '-')
        title = f"{g_disp}: {pretty}"
        label = f"fig:{metric_token}_{safe}_compare"
        lines.append(subfigure_block(nic, title, label, cols, count))
        count += 1

    if count == 0:
        return ""  # nothing found for this metric

    cap = f"{pretty} comparison across graphs (reinforcement strategies)"
    label = f"fig:compare_{metric_token}_all_graphs"
    lines.append(end_figure_star(cap, label))
    lines.append("")  # blank line
    return "\n".join(lines)

# ---- Main -----------------------------------------------------------------
def main():
    ap = argparse.ArgumentParser(description="Emit LaTeX figures from a flat image directory.")
    ap.add_argument("--root", default=".", help="Directory with <graph>_compare_<metric>.jpg files")
    ap.add_argument("--out", default="compare_figures.tex", help="Output LaTeX file")
    ap.add_argument("--cols", type=int, default=3, choices=[2,3,4], help="Subfigures per row")
    args = ap.parse_args()

    root = Path(args.root)
    if not root.exists():
        raise SystemExit(f"Root not found: {root}")

    blocks = [latex_header()]

    found_any = False
    for token, pretty in METRICS.items():
        fig_block = build_metric_figure(root, token, pretty, cols=args.cols)
        if fig_block:
            blocks.append(fig_block)
            found_any = True

    if not found_any:
        raise SystemExit("No matching images found. "
                         "Expected names like 'bfn.tgf_compare_aG.jpg', 'isis-links.json_compare_e0.jpg', etc.")

    out_path = Path(args.out)
    out_path.write_text("\n".join(blocks), encoding="utf-8")
    print(f"[ok] wrote {out_path.resolve()}")

if __name__ == "__main__":
    main()
